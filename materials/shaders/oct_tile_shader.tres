[gd_resource type="VisualShader" load_steps=10 format=2]

[sub_resource type="VisualShaderNodeSwitch" id=1]

[sub_resource type="VisualShaderNodeSwitch" id=2]

[sub_resource type="VisualShaderNodeColorUniform" id=3]
uniform_name = "oct_color_1"

[sub_resource type="VisualShaderNodeColorUniform" id=4]
uniform_name = "oct_color_2"

[sub_resource type="VisualShaderNodeColorUniform" id=5]
uniform_name = "square_color"

[sub_resource type="VisualShaderNodeScalarUniform" id=6]
uniform_name = "scale"

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=8]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 5, 5, 5 ) ]
operator = 2

[sub_resource type="VisualShaderNodeExpression" id=9]
size = Vector2( 497, 283 )
expression = "const float PI = 3.14159265358979323846;

cell_parity = int(floor(coord.x) + floor(coord.y)) % 2 == 0;
vec3 cell_coord = mod(coord, vec3(1.0));
float vec_coord = (1.0 - tan(PI/8.0)) / 2.0;
float vec_coord_inv = 1.0 - vec_coord;
float dist1 = cell_coord.x + cell_coord.y - vec_coord;
float dist2 = -cell_coord.x + cell_coord.y + vec_coord_inv;
float dist3 = -cell_coord.x - cell_coord.y + 1.0 + vec_coord_inv;
float dist4 = cell_coord.x - cell_coord.y - vec_coord + 1.0;
in_oct = min(min(dist1, dist2), min(dist3, dist4)) > 0.0;"

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform float scale;
uniform vec4 oct_color_1 : hint_color;
uniform vec4 oct_color_2 : hint_color;
uniform vec4 square_color : hint_color;



void vertex() {
// Output:0

}

void fragment() {
// Input:7
	vec3 n_out7p0 = vec3(UV, 0.0);

// ScalarUniform:5
	float n_out5p0 = scale;

// VectorOp:8
	vec3 n_out8p0 = n_out7p0 * vec3(n_out5p0);

// Expression:9
	bool n_out9p0;
	bool n_out9p1;
	float n_out9p2;
	n_out9p0 = false;
	n_out9p1 = false;
	n_out9p2 = 0.0;
	{
		const float PI = 3.14159265358979323846;
		
		n_out9p0 = int(floor(n_out8p0.x) + floor(n_out8p0.y)) % 2 == 0;
		vec3 cell_coord = mod(n_out8p0, vec3(1.0));
		float vec_coord = (1.0 - tan(PI/8.0)) / 2.0;
		float vec_coord_inv = 1.0 - vec_coord;
		float dist1 = cell_coord.x + cell_coord.y - vec_coord;
		float dist2 = -cell_coord.x + cell_coord.y + vec_coord_inv;
		float dist3 = -cell_coord.x - cell_coord.y + 1.0 + vec_coord_inv;
		float dist4 = cell_coord.x - cell_coord.y - vec_coord + 1.0;
		n_out9p1 = min(min(dist1, dist2), min(dist3, dist4)) > 0.0;
	}

// ColorUniform:2
	vec3 n_out2p0 = oct_color_1.rgb;
	float n_out2p1 = oct_color_1.a;

// ColorUniform:3
	vec3 n_out3p0 = oct_color_2.rgb;
	float n_out3p1 = oct_color_2.a;

// VectorSwitch:10
	vec3 n_out10p0;
	if(n_out9p0)
	{
		n_out10p0 = n_out2p0;
	}
	else
	{
		n_out10p0 = n_out3p0;
	}

// ColorUniform:4
	vec3 n_out4p0 = square_color.rgb;
	float n_out4p1 = square_color.a;

// VectorSwitch:11
	vec3 n_out11p0;
	if(n_out9p1)
	{
		n_out11p0 = n_out10p0;
	}
	else
	{
		n_out11p0 = n_out4p0;
	}

// Output:0
	ALBEDO = n_out11p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -891.5, 28.25 )
nodes/fragment/0/position = Vector2( 800, 140 )
nodes/fragment/2/node = SubResource( 3 )
nodes/fragment/2/position = Vector2( -540, 280 )
nodes/fragment/3/node = SubResource( 4 )
nodes/fragment/3/position = Vector2( -540, 400 )
nodes/fragment/4/node = SubResource( 5 )
nodes/fragment/4/position = Vector2( -540, 520 )
nodes/fragment/5/node = SubResource( 6 )
nodes/fragment/5/position = Vector2( -540, 200 )
nodes/fragment/7/node = SubResource( 7 )
nodes/fragment/7/position = Vector2( -540, 80 )
nodes/fragment/8/node = SubResource( 8 )
nodes/fragment/8/position = Vector2( -300, 40 )
nodes/fragment/9/node = SubResource( 9 )
nodes/fragment/9/position = Vector2( -80, 40 )
nodes/fragment/9/size = Vector2( 497, 283 )
nodes/fragment/9/input_ports = "0,1,coord;"
nodes/fragment/9/output_ports = "0,2,cell_parity;1,2,in_oct;2,0,edge_distance;"
nodes/fragment/9/expression = "const float PI = 3.14159265358979323846;

cell_parity = int(floor(coord.x) + floor(coord.y)) % 2 == 0;
vec3 cell_coord = mod(coord, vec3(1.0));
float vec_coord = (1.0 - tan(PI/8.0)) / 2.0;
float vec_coord_inv = 1.0 - vec_coord;
float dist1 = cell_coord.x + cell_coord.y - vec_coord;
float dist2 = -cell_coord.x + cell_coord.y + vec_coord_inv;
float dist3 = -cell_coord.x - cell_coord.y + 1.0 + vec_coord_inv;
float dist4 = cell_coord.x - cell_coord.y - vec_coord + 1.0;
in_oct = min(min(dist1, dist2), min(dist3, dist4)) > 0.0;"
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 480, 80 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 480, 200 )
nodes/fragment/connections = PoolIntArray( 8, 0, 9, 0, 5, 0, 8, 1, 9, 0, 10, 0, 2, 0, 10, 1, 3, 0, 10, 2, 9, 1, 11, 0, 10, 0, 11, 1, 4, 0, 11, 2, 11, 0, 0, 0, 7, 0, 8, 0 )
